{
  
    
        "post0": {
            "title": "System Design Overview",
            "content": "System Design . Scalability . Scalability for Dummies | A Word on Scalability | . Clones . Load balancers evenly distribute user requests to public web servers. | Rule #1: Every server contains exactly the same codebase and does not store any user-related data, like sessions or profile pictures, on local disc or memory. | Sessions need to stored in a centralized data store that is accessible by all application servers. The data store can be an external database or an external persistent cache (e.g. Redis), which will have better performance than an external database. | External means data store is somewhere in or near the data center of application servers, does not reside on application servers themselves. | . | Deployment ensures that a code change is sent to all servers without an outdated server still serving old code. | Clones are instances of an machine image based upon a “super-clone” that is created from one of your servers. Just do an initial deployment of your latest code to a new clone and everything is ready. | . | . Databases . Using cloning, you can now horizontally scale across multiple servers to handle lots of requests. | But one day, your application slows and breaks due to the MySQL database. | Path 1: Keep MySQL Apply active-passive replication strategy on the database. | Upgrade server components like RAM. | Consider sharding, denormalization, SQL tuning, etc. | Eventually the upkeep will become too expensive. | . | Path 2: NoSQL Denormalize right from the beginning. | Remove joins from any database query. | Use MySQL as a NoSQL database or switch to MongoDB. | If database requests still get too slow, consider a cache. | . | . Cache . An in-memory cache (e.g. Memcached, Redis) is a simple key-value store that resides between the application and data storage. | The application should try to read from the cache first before hitting the database because the cache is lightning fast. The cache holds every dataset in RAM and handles requests as fast as possible. | . | Cached Database Queries Whenevery a query on the database is run, store the result dataset in a cache. | Use a hashed version of query as cache key. | Expiration is a large issue. All cached results that include piece a data needed to be deleted when that piece of data changes. | . | . | Cached Objects See the data as an object or class. Let the class assemble the dataset from the database. | Store the complete instance of the class or assembled dataset into the cache. | . | Rather than storing results of multiple queries, we can aggregate the results as data for a class instance and store the instance in the cache. If this ID is not present in the cache, load the data from DB, translate it and return to the client. You can cache this result by translating this data again, into the rawdata your cache has, and put it into the cache. | This makes it easy to delete the object when a piece of data changes. | This makes asynchronous processing possible. Servers query the database to assemble the data in the class. | The application just serves the latest cached object and never touches the database. | . | Example Objects: user sessions, fully rendered blog articles, activity streams, user-friend relationships The blog object has multiple methods that query the database for data. | Instead of caching the result of these separate database calls, cache the entire blog object. | When something changes, the blog object queries the database for updated data. | The application only has to serve the latest cached blog post instead of querying the database. | . | . | . Asynchronism . Asynchronously doing work in advance and serving finished work with low request time. Used to turn dynamic content into static content. Think pre-rendering pages into static HTML files to be served quicker. | The rendering can be scripted to run every hour by a cronjob. | This pre-computing process helps make web applications scalable and performant | . | . | Referring unforseen, immediate requests to an asynchronous service. Upon receiving a computing intensive task, the job is added to the job queue. | The job is then sent to an asynchronous server to be processed in the background. | The results are returned once the server is done processing. | . | Basic idea: Have a queue of tasks or jobs that a worker can process. Backends become scalable and frontends become responsive. | Tools to implement async processing: RabbitMQ | . | . Performance vs Scalability . A service is scalable if it results in increased performance in a manner proportional to resources added. E.g. adding another server to handle requests speeds up the website response time | . | If the system is slow for a single user, there is a performance problem. | If the system is fast for a single user but slow under heavy load, there is a scalability problem. . | An always-on service is scalable if adding resources to facilitate redundancy does not result in loss of performance. E.g. adding multiple copies of a database for redundancy does not decrease the query response time | . | Scalability requires applications be designed with scaling in mind. | Scalability also has to handle heterogeneity. As new resources (hardware, software) come online, some nodes will be able to process faster or store more data than other nodes in a system. | . | . Latency vs Throughput . Latency is the time to perform some action or to produce some result. | Throughput is the number of such actions or results per unit of time. | Generally, you should aim for maximal throughup with acceptable latency. | . Availability vs Consistency . CAP Theorem . * In a distributed system, you can only support 2 guarantees: * **Consistency**: every read receives most recent write or an error * **Availability**: every request receives a response, without guarantee that it contains the most recent version of the data * **Partition Tolerance**: system continues to operate despite arbitrary partitioning due to network failures, e.g. a server crashes or goes offline * Networks aren&#39;t reliable, so *partition tolerance needs to be supported*. * You need to make a *software tradeoff between consistency and availability*. . Consistency and Partition Tolerance (CP) . * System is consistent across servers and can handle network failures, but responses to requests are not always available. * Waiting for a response from the partitioned node might result in a timeout error. * Good choice if **atomic reads and writes** are required. * **Atomic** refers to performing operations one at a time. . Availability and Partition Tolerance (AP) . * System is always available and can handle network failures, but the data is not always consistent or up to date across nodes. * Responses return the most readily available version of the data on any node, which might be outdated. * Writes might take some time to propagate when the partition/failure is resolved. * Good choice if **eventual consistency** is needed or when the system needs to continue working despite external errors. . Consistency Patterns . With multiple copies of the same data (redundancy), how do we synchronize them across nodes (consistency) to provide all users the same view of the data? The CAP Theorem need to respond to every read with the most recent write or an error to be consistent. | . | . Weak Consistency . * After a write, reads *may or may not* see it, and a best effort approach is taken. * Weak consistency works well for real-time use cases, such as VoIP, video chat, and realtime multiplayer video games. * If you briefly lose reception during a phone call, you don&#39;t really care or hear what was lost during connection loss. * Weak consistency is used in systems like memcached, where the result might or might not be there. . Eventual Consistency . * After a write, reads *will eventually* see it, typically within milliseconds. * Data is **replicated asynchronously**. * Eventual consistency works well in highly available systems. * Eventual consistency is used in systems like DNS and email. . Strong Consistency . * After a write, reads *will* see it. * Data is **replicated synchronously**. * Strong Consistency works well in systems that need transactions. * Strong consistency is used in systems like file systems and relational database management systems (RDBMSes). . Transactions . * An extended form of consistency across multiple operations. * E.g. transfering money from account A to account B * Operation 1: subtract from A * Operation 2: add to B * What if something happens in between operations? * E.g. Another transaction A or B, machine crashes * You want some kind of guarantee that the invariants will be maintained. * Money subtracted from A will go back to A. * Money created will eventually be added to B. * Transactions are useful because... * Correctness * Consistency * Enforce invariants * ACID: atomic, consistent, isolated, durable . Availability Patterns . Fail-Over . * Active-Passive * Heartbeats are sent between the active server and the passive server on standby. Only the active server handles traffic. * If a heartbeat is interrupted, the passive server takes over the active server&#39;s IP address and resumes service to maintain availability. * Downtime duration is determined by whether passive servier is already running in &#39;hot&#39; standby or starting from &#39;cold&#39; standby. * Active-Active * Both servers are managing traffic, spreading load between them * If servers are public-facing, DNS needs to know about public IPs of both servers. * If servers are private-facing, application logic needs to know about both servers. * Disadvantages * More hardware and additional complexity * Potential for loss of data if active system fails before any newly written data can be replicated to the passive . Replication . * Master-Slave * One master node handles all writes, which are then replicated onto multiple slave nodes. * Master-Master * Both master nodes handle all write requests, spreading load between them. The changes are then replicated onto multiple slave nodes. . Availability in Numbers . * **Uptime** or **downtime** is the percentage of time the service is available/not available. * Availability is generally measured in 9s, by which a service with 99.99% availability is described as having &quot;four 9s&quot;. | Acceptable Downtime Duration | 99.9% Availability | 99.99% Availability | | -- | : | : | | Downtime per year | 8h 45m 57.0s | 52m 35.7s | | Downtime per month | 43m 49.7s | 4m 23.0s | | Downtime per week | 10m 04.8s | 1m 05.0s | | Downtime per day | 1m 26.4s | 08.6s | . Availability in Sequence . * Overall availability *decreases* when two components with &lt; 100% availability are in **sequence**. * $$ text{Availability}( text{Total}) = text{Availability}( text{Foo}) * text{Availabiilty}( text{Bar})$$ * If both Foo and Bar have 99.9% availability each, their total availability in sequence would be 99.8%. . Availability in Parallel . * Overall availability *increases* when two componenets with &lt; 100% availabiilty are in **parallel**. * $$ text{Availability}( text{Total}) = 1 - (1 - text{Availability}( text{Foo})) * (1 - text{Availabiilty}( text{Bar}))$$ * If both Foo and Bar have 99.9% availability each, their total availability in parallel would be 99.9999%. . Domain Name System (DNS) . A Domain Name System (DNS) translates a domain name, e.g. www.example.com, to an IP address, e.g. 8.8.8.8. DNS is hierarchical, with a few authoritative servers at the top level. | Your router or ISP provides information about which DNS server(s) to contact when doing a lookup. | Lower level DNS servers cache mappings, which could become stale due to DNS propagation delays. | DNS results can also be cached by your browser or OS for a certain period of time, determined by the time to live (TTL). | . | A Name Server (NS) Record specifieds the DNS servers for your domain/subdomain. | A Mail Exchange (MX) Record specifies the mail servers for accepting messages. | An Address (A) Record points a name to an IP address. | A Canonical Name (CNAME) points a name to another name or to an A Record, e.g. pointing example.com to www.example.com. | Services that provide managed DNS services include: CloudFlare, Route 53, etc. | . DNS Traffic Routing Methods . * **Round Robin** * Pairs an incoming request to a specific machine by circling through a list of servers capaable of handling the request * May not result in a perfectly-balanced load distribution * **Weighted Round Robin** * Each server machine is assigned a performance value, or weight, relative to the other servers in the pool, usually in an automated benchmark testing. * This weight determines how many more or fewer requests are sent to that server, compared to other servers in the pool. * The result is a more even or equal load distribution. * Prevents traffic from going to servers under maintenance. * Weights can help load balance between varying cluster sizes. * A/B Testing * **Latency-Based** * Create latency records between servers in multiple regions. * When a request arrives, the DNS queries the NS, which looks at the most recent latency data. * The load balancer with the lowest latency is the one chosen to serve the user. * **Geolocation-Based**: * Choosing servers to serve traffic based on the geographic location of users. * E.g. routing all European traffic to a European load balancer * Can localize content and restrict content distribution based on region. * Can load balance predicatably so each user location is consistently routed to the same endpoint. . Disadvantages of DNS . * Accessing a DNS server introduces a slight delay, which can be mitigated by caching. * DNS server management is complex and generally managed by governments, ISPs, and large companies. * DNS services are susceptible to **Distributed Denial of Service (DDoS)** attacks, which prevent users from accessing websites without knowing Twitter&#39;s IP address(es). . Content Delivery Network (CDN) . A Content Delivery Network (CDN) is a globally distributed network of proxy servers, serving content from locations closer to the user. Generally, static files (e.g. HTML, CSS, JS, photos, videos) are served from CDNs. Some CDNs like AWS CloudFront supports serving dynamic content. | . | The website’s DNS resolution tells clients which CDN server to contact. | . | Advantages Improved performance because users receive content from data centers close to them. | Reduced load because your servers do not have to serve requests that the CDN fulfills. | . | . Push CDNs . * Receive new content whenever changes occur on your server. * Content is only uploaded when it is new or changed, minimizing traffic but maximizing storage. * You take full responsibility for providing content, uploading directly to the CDN, and rewriting URLs to point to the CDN. * You can configure when content expires and when it is updated using TTLs. * Push CDNs work well for sites with small amounts of traffic or content that isn&#39;t often updated. * Content is pushed to the CDNs when needed, instead of being re-pulled at regular intervals. * For lots of updates, pushing content to the Push CDN places load on the server. * For heavy traffic, the Push CDN&#39;s cached content may not be sufficient and will place more load on the server to push content to the Push CDN. . Pull CDNs . * Grabs new content from your server when the first user requests the content. * You take full responsibility for providing content and rewriting URLs to point to the CDN. * This results in slower requests until content is cached on the CDN, as users need to pull from the server upon the first request. * A **time to live (TTL)** determines the life of the cached content, which you do not typically have control of. * Pull CDNs minimizing storage space on the CDN, but can create redundant traffic if files expire and are pulled before they have actually changed. * Pull CDNs work well for sites with heavy traffic because the traffic spread out more evenly with only recently-requested content remaining on the CDN. * Older requested content is expired by the TTL, making space for new content. * For lots of updates, the Pull CDN is able to pull and cache the updated content when requested or old content is expired. * For heavy traffic, the Pull CDN can serve the most requested, cached content, only pulling from the server when for less requested content. . Disadvantages of CDNs . * CDN costs could be significant depending on traffic, although this should be compared against additional costs of not using a CDN. * Cached content might be stale if it is updated before the TTL expires it to be updated. * CDNs require changing URLs for static content to point to the CDN, e.g. directing `facebook.com` to `cdn-images.fb.com`. . Load Balancer . | . Reverse Proxy . Advantages | | . | Disadvantages | . Load Balancer vs Reverse Proxy . Application Layer . Microservices . Service Discovery . Disadvantages . Database . SQL/Relational Database Management System (RDBMS) ACID | Master-Slave Replication | Master-Master Replication | Disadvantages of Replication . | Federation . | Sharding . | Denormalization . | SQL Tuning | . | NoSQL BASE | Key-Value Store | Document Store | Wide-Column Store | Graph Database | . | SQL vs NoSQL | . Cache . Client Caching . | CDN Caching . | Web Server Caching . | Database Caching Query Caching | Object Caching | . | Application Caching . | Updating Cache Cache-Aside | Write-Through | Write-Behind/Write-Back | Refresh-Ahead | . | Cache Disadvantages | . Asynchronism . Message Queues | Task Queues | Back Pressure | Aynchronism Disadvantages | . Communication . Hypertext Transfer Protocol (HTTP) | Transmission Control Protocol (TCP) | User Datagram Protocol (UDP) | Remote Procedure Call (RPC) | Representational State Transfer (REST) | RPC vs REST Calls | . Security . References .",
            "url": "https://nhtsai.github.io/notes/system-design-overview",
            "relUrl": "/system-design-overview",
            "date": " • Sep 5, 2021"
        }
        
    
  
    
  
    
  
    
  
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nhtsai.github.io/notes/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nhtsai.github.io/notes/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am a university graduate interested in data science and machine learning. Currently looking for internship and job opportunities. .",
          "url": "https://nhtsai.github.io/notes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nhtsai.github.io/notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}